float SampleShadow(sampler2D shadowMap, vec3 projCoords, float bias)
{
    float depth = texture(shadowMap, projCoords.xy).r;
    return 1.0 - step(projCoords.z - bias, depth);
}

// Distance fade for shadows to appear smoothly
float CalculateShadowFalloff(vec3 projCoords, float intensity)
{
    projCoords.z = clamp(projCoords.z, 0.5, 1.0); // Prevents falloff when the light source is close to a shadow caster
    const float dist = (0.5 - clamp(distance(projCoords, vec3(0.5)), 0.0, 0.5)) * 2.0;
    return 1.0 - pow(1.0 - dist, intensity);
}

// PCF (Percentage-Closer Filtering) shadows => AKA Soft Shadows
float CalculateSoftShadow(sampler2D shadowMap, vec3 projCoords, float bias, float texelSize)
{
    const int range = 1;
    const float invSamples = 1.0 / pow((range * 2 + 1), 2);

    float shadow = 0.0;

    for (int x = -range; x <= range; ++x)
    {
        for (int y = -range; y <= range; ++y)
        {
            const vec2 offset = vec2(x, y) * texelSize;
            const vec3 offsettedProjCoords = vec3(projCoords.xy + offset, projCoords.z);
            shadow += SampleShadow(shadowMap, offsettedProjCoords, bias);
        }
    }

    return shadow * invSamples;
}

// Default shadow calculation
float CalculateHardShadow(sampler2D shadowMap, vec3 projCoords, float bias)
{
    return SampleShadow(shadowMap, projCoords, bias);
}

float CalculateShadowBias(vec3 normal, vec3 lightDir, float texelSize)
{
    const float bias = 0.001;
    const float k = bias * (texelSize * 8096);
    return max(k * (1.0 - dot(normal, lightDir)), k);
}

float CalculateShadow(vec4 fragPosLightSpace, sampler2D shadowMap, vec3 normal, vec3 lightDir)
{
    const float texelSize = 1.0 / vec2(textureSize(shadowMap, 0)).x;
    const vec3 projCoords = (fragPosLightSpace.xyz / fragPosLightSpace.w) * 0.5 + 0.5;

    if (projCoords.z > 1.0) return 0.0;

    float bias = CalculateShadowBias(normal, lightDir, texelSize);
    float shadow = CalculateSoftShadow(shadowMap, projCoords, bias, texelSize);
    
    shadow *= CalculateShadowFalloff(projCoords, 8);

    return shadow;
}
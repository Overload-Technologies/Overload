#pass SHADOW_PASS
#pass REFLECTION_PASS

#feature PARALLAX_MAPPING
#feature NORMAL_MAPPING
#feature DISTANCE_FADE
#feature SPECULAR_WORKFLOW
#feature REFRACTION

#shader vertex
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"

layout (location = 0) in vec3 geo_Pos;
layout (location = 1) in vec2 geo_TexCoords;
layout (location = 2) in vec3 geo_Normal;
layout (location = 3) in vec3 geo_Tangent;
layout (location = 4) in vec3 geo_Bitangent;

out VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
#if defined(PARALLAX_MAPPING)
    vec3 TangentViewPos;
    vec3 TangentFragPos;
#endif
} vs_out;

void main()
{
    vs_out.FragPos = vec3(ubo_Model * vec4(geo_Pos, 1.0));
    vs_out.TexCoords = geo_TexCoords;
    vs_out.Normal = normalize(mat3(transpose(inverse(ubo_Model))) * geo_Normal);
    vs_out.TBN = ConstructTBN(ubo_Model, geo_Normal, geo_Tangent, geo_Bitangent);

#if defined(PARALLAX_MAPPING)
    const mat3 TBNi = transpose(vs_out.TBN);
    vs_out.TangentViewPos = TBNi * ubo_ViewPos;
    vs_out.TangentFragPos = TBNi * vs_out.FragPos;
#endif

    gl_Position = ubo_Projection * ubo_View * vec4(vs_out.FragPos, 1.0);
}

#shader fragment
#version 450 core

#if defined(REFLECTION_PASS)
// Disable IBL for the reflection capture pass, otherwise reflective objects will
// bounce infinitely, causing some artifacts. This define must be set before the PBR
// shader is included, so it must be defined here.
#define DISABLE_IMAGE_BASED_LIGHTING
#endif

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Lighting/PBR.ovfxh"

in VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
#if defined(PARALLAX_MAPPING)
    vec3 TangentViewPos;
    vec3 TangentFragPos;
#endif
} fs_in;

uniform sampler2D u_AlbedoMap;
uniform vec4 u_Albedo = vec4(1.0);

uniform sampler2D u_AmbientOcclusionMap;
uniform sampler2D u_MaskMap;

#if defined(SPECULAR_WORKFLOW)
uniform sampler2D u_SpecularMap;
uniform float u_Specular = 1.0;
uniform sampler2D u_GlossinessMap;
uniform float u_Glossiness = 1.0;
#else
uniform sampler2D u_MetallicMap;
uniform float u_Metallic = 1.0;
uniform sampler2D u_RoughnessMap;
uniform float u_Roughness = 1.0;
#endif

#if defined(NORMAL_MAPPING)
uniform sampler2D u_NormalMap;
#endif

#if defined(PARALLAX_MAPPING)
uniform sampler2D u_HeightMap;
uniform float u_HeightScale = 0.05;
uniform bool u_ParallaxClipEdges = false;
uniform int u_MinLayers = 8;
uniform int u_MaxLayers = 64;
#endif

#if defined(SHADOW_PASS)
#undef PARALLAX_MAPPING // Disable parallax mapping in shadow pass
uniform float u_ShadowClippingThreshold = 0.5;
#endif

#if defined(DISTANCE_FADE)
uniform float u_DistanceFadeStart = 100.0;
uniform float u_DistanceFadeLength = 10.0;
#endif

uniform vec2 u_TextureTiling = vec2(1.0, 1.0);
uniform vec2 u_TextureOffset = vec2(0.0, 0.0);

uniform float u_AlphaClippingThreshold = 0.0;
uniform bool u_AlphaDithering = false;

// Useful when no post-processing is applied.
uniform bool u_BuiltInToneMapping = false;
uniform bool u_BuiltInGammaCorrection = false;

uniform sampler2D _ShadowMap;
uniform mat4 _LightSpaceMatrix;
uniform samplerCube _EnvironmentMap;

#if defined(REFRACTION)
uniform float u_RefractionIndex = 1.33; // Default for water
uniform float u_RefractionStrength = 0.5;
uniform bool u_ChromaticAberration = false;
uniform float u_ChromaticStrength = 0.03;
uniform sampler2D u_ThicknessMap;
uniform float u_Thickness = 0.1;
uniform vec3 u_TransmittanceColor = vec3(1.0, 1.0, 1.0);
uniform float u_TransmittanceDensity = 5.0;
uniform bool u_InternalReflections = false;
uniform int u_MaxBounces = 2;
#endif

out vec4 FRAGMENT_COLOR;

void main()
{
#if defined(DISTANCE_FADE)
    const float distanceAlpha = DistanceFadeAlpha(fs_in.FragPos, ubo_ViewPos, u_DistanceFadeStart, u_DistanceFadeLength);
    const float ditheredDistanceAlpha = Dithering(distanceAlpha, gl_FragCoord.xy);
    if (ditheredDistanceAlpha < 0)
    {
        discard;
    }
#endif

    vec2 texCoords = TileAndOffsetTexCoords(fs_in.TexCoords, u_TextureTiling, u_TextureOffset);

#if defined(PARALLAX_MAPPING)
    texCoords = ApplyParallaxOcclusionMapping(texCoords, u_HeightMap, fs_in.TangentViewPos, fs_in.TangentFragPos, u_HeightScale, u_MinLayers, u_MaxLayers);
    if (u_ParallaxClipEdges && IsParallaxOutOfBounds(texCoords, u_TextureTiling, u_TextureOffset, ubo_Projection))
    {
        discard;
    }
#endif

    vec4 albedo = texture(u_AlbedoMap, texCoords) * u_Albedo;
    albedo.a *= texture(u_MaskMap, texCoords).r;

#if defined(SHADOW_PASS)
    if (albedo.a < u_ShadowClippingThreshold)
    {
        discard;
    }
#else

    if (albedo.a < u_AlphaClippingThreshold)
    {
        discard;
    }

    if (u_AlphaDithering && Dithering(albedo.a, gl_FragCoord.xy) < 0)
    {
        discard;
    }

#if defined(NORMAL_MAPPING)
    const vec3 normal = ComputeNormal(texCoords, fs_in.Normal, u_NormalMap, fs_in.TBN);
#else
    const vec3 normal = normalize(fs_in.Normal);
#endif

#if defined(SPECULAR_WORKFLOW)
    const float specular = texture(u_SpecularMap, texCoords).r * u_Specular;
    const float glossiness = texture(u_GlossinessMap, texCoords).r * u_Glossiness;
    const float metallic = 1.0 - specular;
    const float roughness = 1.0 - glossiness;
#else
    const float metallic = texture(u_MetallicMap, texCoords).r * u_Metallic;
    const float roughness = texture(u_RoughnessMap, texCoords).r * u_Roughness;
#endif

    const float ao = texture(u_AmbientOcclusionMap, texCoords).r;

    vec3 pbr = PBRLightingModel(
        albedo.rgb,
        metallic,
        roughness,
        ao,
        normal,
        ubo_ViewPos,
        fs_in.FragPos,
        _ShadowMap,
        _LightSpaceMatrix,
        _EnvironmentMap
    );

#if defined(REFRACTION)
    vec3 viewDir = normalize(ubo_ViewPos - fs_in.FragPos);
    
    // Calculate local thickness from map or use global thickness
    float materialThickness = u_Thickness;
    if (textureSize(u_ThicknessMap, 0).x > 1) {
        materialThickness *= texture(u_ThicknessMap, texCoords).r;
    }
    
    // Calculate refraction vector
    vec3 refractionVector = refract(-viewDir, normal, 1.0 / u_RefractionIndex);
    
    // Sample environment map using refraction vector
    vec3 refractionColor;
    
    if (u_ChromaticAberration) {
        // Simple chromatic aberration effect by using different IORs for RGB
        vec3 refractionVectorR = refract(-viewDir, normal, 1.0 / (u_RefractionIndex * (1.0 - u_ChromaticStrength)));
        vec3 refractionVectorB = refract(-viewDir, normal, 1.0 / (u_RefractionIndex * (1.0 + u_ChromaticStrength)));
        
        refractionColor.r = texture(_EnvironmentMap, refractionVectorR).r;
        refractionColor.g = texture(_EnvironmentMap, refractionVector).g;
        refractionColor.b = texture(_EnvironmentMap, refractionVectorB).b;
    } else {
        refractionColor = texture(_EnvironmentMap, refractionVector).rgb;
    }
    
    // Apply Beer's law for light absorption based on thickness
    // exp(-density * thickness * (1 - transmittance_color))
    vec3 absorption = exp(-u_TransmittanceDensity * materialThickness * (vec3(1.0) - u_TransmittanceColor));
    refractionColor *= absorption;
    
    // Internal reflections for thick materials
    if (u_InternalReflections && materialThickness > 0.05) {
        vec3 internalReflectionColor = vec3(0.0);
        vec3 attenuationFactor = vec3(1.0);
        vec3 currentRay = refractionVector;
        
        // Simulate a few internal bounces
        for (int i = 0; i < u_MaxBounces; i++) {
            // Internal reflection at the back face
            vec3 backFaceNormal = -normal; // Simplified approximation
            vec3 reflectedRay = reflect(currentRay, backFaceNormal);
            
            // Attenuate with each bounce (energy loss)
            attenuationFactor *= absorption * 0.5;
            
            // Sample environment and add contribution
            vec3 bounceColor = texture(_EnvironmentMap, reflectedRay).rgb;
            internalReflectionColor += bounceColor * attenuationFactor;
            
            // Update ray for next bounce (simplified)
            currentRay = reflectedRay;
        }
        
        // Add internal reflections to refraction color
        refractionColor += internalReflectionColor;
    }
    
    // Calculate fresnel term to blend between refraction and PBR lighting
    float fresnel = pow(1.0 - max(dot(viewDir, normal), 0.0), 5.0);
    
    // Thickness affects the balance between reflection and refraction
    // Thicker materials show more internal color (transmittance) effects
    float thicknessModifier = smoothstep(0.0, 1.0, materialThickness * 5.0);
    
    // Blend based on material properties, fresnel, and thickness
    float refractionFactor = (1.0 - metallic) * u_RefractionStrength * (1.0 - fresnel);
    
    // Thicker materials have more absorption but also more internal effects
    refractionFactor *= mix(1.0, 0.8, thicknessModifier);
    
    // Apply refraction by blending with PBR result
    pbr = mix(pbr, refractionColor, refractionFactor * (1.0 - roughness));
#endif

    // Simple built-in tonemapping (Reinhard) and gamma correction for elements
    // not affected by post-processing (e.g. debug, UI, etc.), but still aiming
    // to approximate the final PBR look.
    pbr = mix(pbr, pbr / (pbr + vec3(1.0)), u_BuiltInToneMapping);
    pbr = mix(pbr, pow(pbr, vec3(1.0 / 2.2)), u_BuiltInGammaCorrection);

    FRAGMENT_COLOR = vec4(pbr, albedo.a);
#endif
}

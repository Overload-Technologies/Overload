#include ":Shaders/Common/Buffers/LightsSSBO.ovfxh"
#include ":Shaders/Common/Constants.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"
#include ":Shaders/Lighting/Light.ovfxh"
#include ":Shaders/Lighting/IBL.ovfxh"

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    const float a = roughness * roughness;
    const float a2 = a * a;
    const float NdotH  = max(dot(N, H), 0.0);
    const float NdotH2 = NdotH * NdotH;
    
    const float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    const float r = (roughness + 1.0);
    const float k = (r * r) / 8.0;

    const float num = NdotV;
    const float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    const float NdotV = max(dot(N, V), 0.0);
    const float NdotL = max(dot(N, L), 0.0);
    const float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    const float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

// Cook-Torrance BRDF calculation
vec3 CalculateBRDF(LightContribution lightContrib, vec3 V, vec3 N, vec3 albedo, float metallic, float roughness, vec3 F0)
{
    const vec3 radiance = lightContrib.radiance;
    const vec3 L = lightContrib.L;

    const vec3 H = normalize(V + L);
    
    // Cook-Torrance BRDF components
    const float NDF = DistributionGGX(N, H, roughness);
    const float G = GeometrySmith(N, V, L, roughness);
    const float cosTheta = clamp(dot(H, V), 0.0, 1.0);
    const vec3 F = FresnelSchlick(cosTheta, F0);
    
    // Energy conservation
    const vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallic;
    
    // BRDF calculation
    const vec3 numerator = NDF * G * F;
    const float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
    const vec3 specular = numerator / max(denominator, 0.001);
    
    const float NdotL = max(dot(N, L), 0.0);
    return (kD * albedo / PI + specular) * radiance * NdotL;
}

vec3 PBRLightingModel(vec3 albedo, float metallic, float roughness, float ao, vec3 normal, vec3 viewPos, vec3 fragPos, sampler2D shadowMap, mat4 lightSpaceMatrix, samplerCube environmentMap)
{
    // Sanitize inputs
    metallic = clamp(metallic, 0.0, 1.0);
    roughness = clamp(roughness, 0.04, 1.0);
    ao = clamp(ao, 0.0, 1.0);
    normal = normalize(normal);

    // Gamma correction of the albedo color (assuming the albedo is in sRGB space)
    albedo = pow(albedo, vec3(2.2));

    const vec3 N = normalize(normal);
    const vec3 V = normalize(viewPos - fragPos);
    const float NdotV = max(dot(N, V), 0.0);
    const vec3 F0 = mix(vec3(0.04), albedo, metallic); 

    // Prepare accumulation variables
    vec3 Lo = vec3(0.0);
    vec3 ambient = vec3(0.0);

    for (int i = 0; i < ssbo_Lights.length(); ++i) 
    {
        const Light light = ExtractLight(ssbo_Lights[i]);

        switch(light.type)
        {
            case 0: // Point Light
            {
                const PointLight pointLight = ExtractPointLight(light);
                const LightContribution contrib = CalculatePointLightContribution(pointLight, fragPos);
                Lo += CalculateBRDF(contrib, V, N, albedo, metallic, roughness, F0);
                break;
            }
            
            case 1: // Directional Light
            {
                const DirectionalLight dirLight = ExtractDirectionalLight(light);
                const LightContribution contrib = CalculateDirectionalLightContribution(dirLight, fragPos, N, shadowMap, lightSpaceMatrix);
                Lo += CalculateBRDF(contrib, V, N, albedo, metallic, roughness, F0);
                break;
            }
            
            case 2: // Spot Light
            {
                const SpotLight spotLight = ExtractSpotLight(light);
                const LightContribution contrib = CalculateSpotLightContribution(spotLight, fragPos);
                Lo += CalculateBRDF(contrib, V, N, albedo, metallic, roughness, F0);
                break;
            }
            
            case 3: // Ambient Box Light
            {
                const AmbientBoxLight boxLight = ExtractAmbientBoxLight(light);
                ambient += CalculateAmbientBoxLightContribution(boxLight, fragPos);
                break;
            }
            
            case 4: // Ambient Sphere Light
            {
                const AmbientSphereLight sphereLight = ExtractAmbientSphereLight(light);
                ambient += CalculateAmbientSphereLightContribution(sphereLight, fragPos);
                break;
            }
        }
    }

    ambient *= albedo * ao;

#if !defined(DISABLE_IMAGE_BASED_LIGHTING)
    ambient += CalculateImageBasedLighting(
        environmentMap,
        fragPos,
        V,
        N,
        roughness,
        metallic,
        F0,
        NdotV,
        albedo,
        ao
    );
#endif
    
    return ambient + Lo;
}

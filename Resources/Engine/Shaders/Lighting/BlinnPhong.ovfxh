#include ":Shaders/Common/Physics.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"
#include ":Shaders/Lighting/Shared.ovfxh"
#include ":Shaders/Common/Buffers/LightsSSBO.ovfxh"

vec3 BlinnPhong(vec3 lightDir, vec3 lightColor, float luminosity, vec4 diffuseTexel, vec4 specularTexel, vec3 normal, vec3 viewDir, float shininess)
{
    const vec3  halfwayDir          = normalize(lightDir + viewDir);
    const float diffuseCoefficient  = max(dot(normal, lightDir), 0.0);
    const float specularCoefficient = pow(max(dot(normal, halfwayDir), 0.0), shininess * 2.0);

    return lightColor * diffuseTexel.rgb * diffuseCoefficient * luminosity + ((luminosity > 0.0) ? (lightColor * specularTexel.rgb * specularCoefficient * luminosity) : vec3(0.0));
}

vec3 ComputePointLight(mat4 light, vec3 fragPos, vec4 diffuseTexel, vec4 specularTexel, vec3 normal, vec3 viewDir, float shininess)
{
    /* Extract light information from light mat4 */
    const vec3 lightPosition = light[0].rgb;
    const vec3 lightColor = UnPack(light[2][0]);
    const float intensity = light[3][3];

    const vec3 lightDirection = normalize(lightPosition - fragPos);
    const float luminosity = LuminosityFromAttenuation(light, fragPos);

    return BlinnPhong(lightDirection, lightColor, intensity * luminosity, diffuseTexel, specularTexel, normal, viewDir, shininess);
}

vec3 ComputeDirectionalLight(mat4 light, vec4 diffuseTexel, vec4 specularTexel, vec3 normal, vec3 viewDir, float shininess)
{
    return BlinnPhong(-light[1].rgb, UnPack(light[2][0]), light[3][3], diffuseTexel, specularTexel, normal, viewDir, shininess);
}

vec3 ComputeSpotLight(mat4 light, vec3 fragPos, vec4 diffuseTexel, vec4 specularTexel, vec3 normal, vec3 viewDir, float shininess)
{
    /* Extract light information from light mat4 */
    const vec3 lightPosition = light[0].rgb;
    const vec3 lightForward = light[1].rgb;
    const vec3 lightColor = UnPack(light[2][0]);
    const float intensity = light[3][3];
    const float cutOff = cos(radians(light[3][1]));
    const float outerCutOff = cos(radians(light[3][1] + light[3][2]));

    const vec3 lightDirection = normalize(lightPosition - fragPos);
    const float luminosity = LuminosityFromAttenuation(light, fragPos);

    /* Calculate the spot intensity */
    const float theta = dot(lightDirection, normalize(-lightForward)); 
    const float epsilon = cutOff - outerCutOff;
    const float spotIntensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);
    
    return BlinnPhong(lightDirection, lightColor, intensity * spotIntensity * luminosity, diffuseTexel, specularTexel, normal, viewDir, shininess);
}

vec3 ComputeAmbientBoxLight(mat4 light, vec3 fragPos, vec4 diffuseTexel)
{
    const vec3 lightPosition = light[0].rgb;
    const vec3 lightColor = UnPack(light[2][0]);
    const float intensity = light[3][3];
    const vec3 size = vec3(light[0][3], light[1][3], light[2][3]);

    return IsPointInAABB(fragPos, lightPosition, size) ? diffuseTexel.rgb * lightColor * intensity : vec3(0.0);
}

vec3 ComputeAmbientSphereLight(mat4 light, vec3 fragPos, vec4 diffuseTexel)
{
    const vec3 lightPosition = light[0].rgb;
    const vec3 lightColor = UnPack(light[2][0]);
    const float intensity = light[3][3];
    const float radius = light[0][3];

    return IsPointInSphere(fragPos, lightPosition, radius) ? diffuseTexel.rgb * lightColor * intensity : vec3(0.0);
}

vec4 ComputeBlinnPhongLighting(vec2 texCoords, vec3 normal, vec3 viewPos, vec3 fragPos, vec4 diffuse, vec3 specular, sampler2D diffuseMap, sampler2D specularMap, float shininess, float shadow)
{
    vec3 viewDir = normalize(viewPos - fragPos);
    vec4 diffuseTexel = texture(diffuseMap,  texCoords) * diffuse;
    vec4 specularTexel = texture(specularMap, texCoords) * vec4(specular, 1.0);

    vec3 lightAccumulation = vec3(0.0);

    for (int i = 0; i < ssbo_Lights.length(); ++i)
    {
        const mat4 light = ssbo_Lights[i];
        const int lightType = int(light[3][0]);

        switch(lightType)
        {
            case 0: lightAccumulation += ComputePointLight(light, fragPos, diffuseTexel, specularTexel, normal, viewDir, shininess); break;
            case 1: lightAccumulation += (1.0 - shadow) * ComputeDirectionalLight(light, diffuseTexel, specularTexel, normal, viewDir, shininess); break;
            case 2: lightAccumulation += ComputeSpotLight(light, fragPos, diffuseTexel, specularTexel, normal, viewDir, shininess); break;
            case 3: lightAccumulation += ComputeAmbientBoxLight(light, fragPos, diffuseTexel); break;
            case 4: lightAccumulation += ComputeAmbientSphereLight(light, fragPos, diffuseTexel); break;
        }
    }

    return vec4(lightAccumulation, diffuseTexel.a);
}

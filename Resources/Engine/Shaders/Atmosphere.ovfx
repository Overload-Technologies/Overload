#feature OUTLINE_PASS
#feature PICKING_PASS
#feature DYNAMIC_SUN_POSITION

#shader vertex
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Buffers/LightsSSBO.ovfxh"

layout (location = 0) in vec3 geo_Pos;

out VS_OUT
{
    vec3 FragPos;
    flat vec3 SunPosition;
} vs_out;

uniform vec3 u_SunPosition = vec3(0.0, 0.1, -1.0); // Default sun position

// Calculate the sun position based on the first directional light in the scene
vec3 calculateSunPositionFromDirectionalLight()
{
    for (int i = 0; i < ssbo_Lights.length(); ++i)
    {
        const mat4 light = ssbo_Lights[i];
        const int lightType = int(light[3][0]);

        if (lightType == 1)
        {
            vec3 lightDirection = -light[1].xyz;
            return normalize(lightDirection);
        }
    }

    // If no directional light is found, use the sun position uniform
    return u_SunPosition;
}

void main()
{
    vs_out.FragPos = geo_Pos;

#if defined(DYNAMIC_SUN_POSITION)
    vs_out.SunPosition = calculateSunPositionFromDirectionalLight();
#else
    vs_out.SunPosition = u_SunPosition;
#endif

    gl_Position = ubo_Projection * ubo_View * vec4(ubo_ViewPos + vs_out.FragPos, 1.0);
}

#shader fragment
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"

in VS_OUT
{
    vec3 FragPos;
    flat vec3 SunPosition;
} fs_in;

#if defined(PICKING_PASS)
uniform vec4 _PickingColor;
#endif

#if defined(OUTLINE_PASS)
uniform vec4 _OutlineColor;
#endif

uniform float u_SunIntensity = 22.0; // Sun intensity
uniform float u_MiePreferredScatteringDirection = 0.758; // Mie preferred scattering direction

const vec3 kRayOrigin = vec3(0.0, 6372e3, 0.0); // Ray origin
const float kPlanetRadius = 6371e3; // Radius of the planet in meters
const float kAtmosphereRadius = 6471e3; // Radius of the atmosphere in meters
const vec3 kRayleighScattering = vec3(5.5e-6, 13.0e-6, 22.4e-6); // Rayleigh scattering coefficient
const float kMieScattering = 21e-6; // Mie scattering coefficient
const float kRayleighScaleHeight = 8e3; // Rayleigh scale height
const float kMieScaleHeight = 1.2e3; // Mie scale height

out vec4 FRAGMENT_COLOR;

// [ATMOSHPERIC SCATTERING] Section Start
// From https://github.com/wwwtyro/glsl-atmosphere/blob/master/index.glsl
#define PI 3.141592
#define iSteps 16
#define jSteps 8

vec2 rsi(vec3 r0, vec3 rd, float sr) {
    // ray-sphere intersection that assumes
    // the sphere is centered at the origin.
    // No intersection when result.x > result.y
    float a = dot(rd, rd);
    float b = 2.0 * dot(rd, r0);
    float c = dot(r0, r0) - (sr * sr);
    float d = (b*b) - 4.0*a*c;
    if (d < 0.0) return vec2(1e5,-1e5);
    return vec2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}

vec3 atmosphere(vec3 r, vec3 r0, vec3 pSun, float iSun, float rPlanet, float rAtmos, vec3 kRlh, float kMie, float shRlh, float shMie, float g) {
    // Normalize the sun and view directions.
    pSun = normalize(pSun);
    r = normalize(r);

    // Calculate the step size of the primary ray.
    vec2 p = rsi(r0, r, rAtmos);
    if (p.x > p.y) return vec3(0,0,0);
    p.y = min(p.y, rsi(r0, r, rPlanet).x);
    float iStepSize = (p.y - p.x) / float(iSteps);

    // Initialize the primary ray time.
    float iTime = 0.0;

    // Initialize accumulators for Rayleigh and Mie scattering.
    vec3 totalRlh = vec3(0,0,0);
    vec3 totalMie = vec3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float mu = dot(r, pSun);
    float mumu = mu * mu;
    float gg = g * g;
    float pRlh = 3.0 / (16.0 * PI) * (1.0 + mumu);
    float pMie = 3.0 / (8.0 * PI) * ((1.0 - gg) * (mumu + 1.0)) / (pow(1.0 + gg - 2.0 * mu * g, 1.5) * (2.0 + gg));

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        vec3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos) - rPlanet;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = rsi(iPos, pSun, rAtmos).y / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            vec3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos) - rPlanet;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        vec3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        totalRlh += odStepRlh * attn;
        totalMie += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;

    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * totalRlh + pMie * kMie * totalMie);
}
// [ATMOSHPERIC SCATTERING] Section End

void main()
{
#if defined(PICKING_PASS)
    // The atmosphere cannot be picked.
    discard;
#elif defined(OUTLINE_PASS)
    // The atmosphere cannot be outlined.
    discard;
#else

    vec3 color = atmosphere(
        normalize(fs_in.FragPos),           // normalized ray direction
        kRayOrigin,                         // ray origin
        fs_in.SunPosition,                  // position of the sun
        u_SunIntensity,                     // intensity of the sun
        kPlanetRadius,                      // radius of the planet in meters
        kAtmosphereRadius,                  // radius of the atmosphere in meters
        kRayleighScattering,                // Rayleigh scattering coefficient
        kMieScattering,                     // Mie scattering coefficient
        kRayleighScaleHeight,               // Rayleigh scale height
        kMieScaleHeight,                    // Mie scale height
        u_MiePreferredScatteringDirection   // Mie preferred scattering direction
    );
    
    FRAGMENT_COLOR = vec4(color, 1.0);
#endif
}

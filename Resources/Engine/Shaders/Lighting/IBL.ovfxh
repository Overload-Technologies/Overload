#include ":Shaders/Common/Buffers/ReflectionUBO.ovfxh"

bool IsPointInOBB(vec3 point, vec3 obbCenter, vec3 obbHalfExtents, mat3 obbOrientation)
{
    vec3 localPoint = obbOrientation * (point - obbCenter);
    
    return abs(localPoint.x) <= obbHalfExtents.x &&
           abs(localPoint.y) <= obbHalfExtents.y &&
           abs(localPoint.z) <= obbHalfExtents.z;
}

// https://seblagarde.wordpress.com/wp-content/uploads/2012/08/parallax_corrected_cubemap-siggraph2012.pdf
vec3 BoxProjectionOBB(vec3 reflectionVector, vec3 worldPos, vec3 probePos, vec3 obbCenter, vec3 obbHalfExtents, mat3 obbOrientation)
{
    // Transform world position and reflection vector to OBB local space
    vec3 localPos = obbOrientation * (worldPos - obbCenter);
    vec3 localReflection = obbOrientation * reflectionVector;
    vec3 localProbePos = obbOrientation * (probePos - obbCenter);
    
    // Perform AABB intersection in local space
    vec3 ndr = normalize(localReflection);
    vec3 rbmax = (obbHalfExtents - localPos) / ndr;
    vec3 rbmin = (-obbHalfExtents - localPos) / ndr;
    
    vec3 rbminmax;
    rbminmax.x = (ndr.x > 0.0) ? rbmax.x : rbmin.x;
    rbminmax.y = (ndr.y > 0.0) ? rbmax.y : rbmin.y;
    rbminmax.z = (ndr.z > 0.0) ? rbmax.z : rbmin.z;
    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
    
    // Find intersection point in local space
    vec3 localIntersection = localPos + ndr * fa;
    
    // Transform intersection back to world space
    vec3 worldIntersection = transpose(obbOrientation) * localIntersection + obbCenter;
    
    return normalize(worldIntersection - probePos);
}

vec3 ParallaxCorrect(vec3 reflectionDir, vec3 worldPos)
{
    if (ubo_ReflectionProbeData.boxProjection)
    {
        return BoxProjectionOBB(
            reflectionDir,
            worldPos, 
            ubo_ReflectionProbeData.position.xyz,
            ubo_ReflectionProbeData.boxCenter.xyz,
            ubo_ReflectionProbeData.boxHalfExtents.xyz,
            mat3(ubo_ReflectionProbeData.rotation)
        );
    }
    
    return reflectionDir; // No box projection, return original reflection direction
}

// BRDF integration approximation for IBL specular
vec2 EnvBRDFApprox(float NdotV, float roughness)
{
    // Approximation from "Moving Frostbite to PBR" by Lagarde & de Rousiers
    // This is great because it mitigates the need to sample a precomputed BRDF LUT!
    const vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);
    const vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);
    vec4 r = roughness * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * NdotV)) * r.x + r.y;
    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;
    return AB;
}

// Modified Fresnel-Schlick approximation that includes roughness term for IBL
vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 CalculateImageBasedLighting(
    samplerCube environmentMap,
    vec3 fragPos,
    vec3 V,
    vec3 N,
    float roughness,
    float metallic,
    vec3 F0,
    float NdotV,
    vec3 albedo,
    float transmission,
    float refractionIndex
) {
    // Early exit if the fragment is outside the reflection probe bounds
    if (ubo_ReflectionProbeData.local && !IsPointInOBB(
        fragPos,
        ubo_ReflectionProbeData.boxCenter.xyz,
        ubo_ReflectionProbeData.boxHalfExtents.xyz,
        mat3(ubo_ReflectionProbeData.rotation))
    )
    {
        return vec3(0.0); // No reflection/refraction.
    }

    // 0. Constants
    const int environmentMaxLOD = textureQueryLevels(environmentMap) - 1;
   
    // 1. Calculate reflection vector
    const vec3 R = ParallaxCorrect(reflect(-V, N), fragPos);
    
    // 2. Calculate refraction vector
    const vec3 T = ParallaxCorrect(refract(-V, N, 1.0 / refractionIndex), fragPos);
   
    // 3. Diffuse irradiance (environment lighting)
    const vec3 irradiance = textureLod(environmentMap, N, environmentMaxLOD).rgb;
   
    // 4. Specular reflection
    const vec3 reflectedColor = textureLod(environmentMap, R, roughness * environmentMaxLOD).rgb;
    
    // 5. Refracted environment sampling
    const vec3 refractedColor = textureLod(environmentMap, T, roughness * environmentMaxLOD).rgb;
    
    // 6. Apply BRDF
    const vec2 brdf = EnvBRDFApprox(NdotV, roughness);
   
    // 7. Calculate Fresnel for IBL
    const vec3 F_IBL = FresnelSchlickRoughness(NdotV, F0, roughness);
    
    // 8. Calculate transmission factor based on Fresnel
    // Higher Fresnel = more reflection, less transmission
    const float avgFresnel = (F_IBL.r + F_IBL.g + F_IBL.b) / 3.0;
    const float transmissionFactor = transmission * (1.0 - avgFresnel);
   
    // 9. Calculate diffuse and reflection IBL components
    const vec3 kS_IBL = F_IBL;
    const vec3 kD_IBL = (1.0 - kS_IBL) * (1.0 - metallic);
    const vec3 diffuseIBL = kD_IBL * irradiance * albedo;
    const vec3 reflectionIBL = reflectedColor * (F_IBL * brdf.x + brdf.y);
    
    // 10. Calculate refraction IBL component
    const vec3 refractionIBL = refractedColor * albedo;

    // 11. Mix reflection and refraction contributions based on transmission factor
    const vec3 specularIBL = mix(reflectionIBL, refractionIBL, transmissionFactor);
   
    // 12. Return combined IBL contribution
    return (diffuseIBL + specularIBL) * ubo_ReflectionProbeData.brightness;
}

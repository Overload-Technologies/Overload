#feature SHADOW_PASS
#feature PARALLAX_MAPPING
#feature ALPHA_CLIPPING
#feature ALPHA_DITHERING
#feature NORMAL_MAPPING
#feature DISTANCE_FADE

#shader vertex
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"

layout (location = 0) in vec3 geo_Pos;
layout (location = 1) in vec2 geo_TexCoords;
layout (location = 2) in vec3 geo_Normal;
layout (location = 3) in vec3 geo_Tangent;
layout (location = 4) in vec3 geo_Bitangent;

out VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
#if defined(PARALLAX_MAPPING)
    vec3 TangentViewPos;
    vec3 TangentFragPos;
#endif
} vs_out;

void main()
{
    vs_out.FragPos = vec3(ubo_Model * vec4(geo_Pos, 1.0));
    vs_out.TexCoords = geo_TexCoords;
    vs_out.Normal = normalize(mat3(transpose(inverse(ubo_Model))) * geo_Normal);
    vs_out.TBN = ConstructTBN(ubo_Model, geo_Normal, geo_Tangent, geo_Bitangent);

#if defined(PARALLAX_MAPPING)
    vs_out.TangentViewPos = transpose(vs_out.TBN) * ubo_ViewPos;
    vs_out.TangentFragPos = transpose(vs_out.TBN) * vs_out.FragPos;
#endif

    gl_Position = ubo_Projection * ubo_View * vec4(vs_out.FragPos, 1.0);
}

#shader fragment
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Lighting/BlinnPhong.ovfxh"

in VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
    mat3 TBN;
#if defined(PARALLAX_MAPPING)
    vec3 TangentViewPos;
    vec3 TangentFragPos;
#endif
} fs_in;

uniform sampler2D u_DiffuseMap;
uniform sampler2D u_SpecularMap;
uniform sampler2D u_MaskMap;
uniform vec4 u_Diffuse = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec3 u_Specular = vec3(1.0, 1.0, 1.0);
uniform vec2 u_TextureTiling = vec2(1.0, 1.0);
uniform vec2 u_TextureOffset = vec2(0.0, 0.0);
uniform float u_Shininess = 100.0;

#if defined(PARALLAX_MAPPING)
uniform sampler2D u_HeightMap;
uniform int u_MinLayers = 8;
uniform int u_MaxLayers = 64;
uniform bool u_ParallaxClipEdges = false;
uniform float u_HeightScale = 0.05;
#endif

#if defined(NORMAL_MAPPING)
uniform sampler2D u_NormalMap;
#endif

#if defined(ALPHA_CLIPPING)
uniform float u_AlphaClippingThreshold = 0.1;
#endif

#if defined(SHADOW_PASS)
#undef PARALLAX_MAPPING // Disable parallax mapping in shadow pass
uniform float u_ShadowClippingThreshold = 0.5;
#endif

#if defined(DISTANCE_FADE)
uniform float u_DistanceFadeStart = 100.0;
uniform float u_DistanceFadeLength = 10.0;
#endif

uniform sampler2D _ShadowMap;
uniform mat4 _LightSpaceMatrix;

out vec4 FRAGMENT_COLOR;

void main()
{
#if defined(DISTANCE_FADE)
    const float distanceAlpha = DistanceFadeAlpha(fs_in.FragPos, ubo_ViewPos, u_DistanceFadeStart, u_DistanceFadeLength);
    const float ditheredDistanceAlpha = Dithering(distanceAlpha, gl_FragCoord.xy);
    if (ditheredDistanceAlpha < 0)
    {
        discard;
    }
#endif

    vec2 texCoords = TileAndOffsetTexCoords(fs_in.TexCoords, u_TextureTiling, u_TextureOffset);

#if defined(PARALLAX_MAPPING)
    texCoords = ApplyParallaxOcclusionMapping(texCoords, u_HeightMap, fs_in.TangentViewPos, fs_in.TangentFragPos, u_HeightScale, u_MinLayers, u_MaxLayers);
    if (u_ParallaxClipEdges && IsParallaxOutOfBounds(texCoords, u_TextureTiling, u_TextureOffset, ubo_Projection))
    {
        discard;
    }
#endif

    vec4 diffuse = texture(u_DiffuseMap, texCoords) * u_Diffuse;
    diffuse.a *= texture(u_MaskMap, texCoords).r;

#if defined(SHADOW_PASS)
    if (diffuse.a < u_ShadowClippingThreshold)
    {
        discard;
    }
#else

#if defined(ALPHA_CLIPPING)
    if (diffuse.a < u_AlphaClippingThreshold)
    {
        discard;
    }
#endif

#if defined(ALPHA_DITHERING)
    const float ditheredAlpha = Dithering(diffuse.a, gl_FragCoord.xy);
    if (ditheredAlpha < 0)
    {
        discard;
    }
#endif

    if (diffuse.a > 0.0)
    {
#if defined(NORMAL_MAPPING)
        const vec3 normal = ComputeNormal(texCoords, fs_in.Normal, u_NormalMap, fs_in.TBN);
#else
        const vec3 normal = normalize(fs_in.Normal);
#endif

        FRAGMENT_COLOR = ComputeBlinnPhongLightingNoDiffuseSampling(
            texCoords,
            normal,
            ubo_ViewPos,
            fs_in.FragPos,
            diffuse,
            u_Specular,
            u_SpecularMap,
            u_Shininess,
            _ShadowMap,
            _LightSpaceMatrix
        );
    }
    else
    {
        FRAGMENT_COLOR = vec4(0.0);
    }
#endif
}

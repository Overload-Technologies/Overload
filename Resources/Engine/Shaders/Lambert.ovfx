#feature SHADOW_PASS

#shader vertex
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"

layout (location = 0) in vec3 geo_Pos;
layout (location = 1) in vec2 geo_TexCoords;
layout (location = 2) in vec3 geo_Normal;

out VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} vs_out;

#if defined(SHADOW_PASS)
uniform mat4 _LightSpaceMatrix;
#endif

void main()
{
    vs_out.FragPos = vec3(ubo_Model * vec4(geo_Pos, 1.0));
    vs_out.TexCoords = geo_TexCoords;
    vs_out.Normal = normalize(mat3(transpose(inverse(ubo_Model))) * geo_Normal);

#if defined(SHADOW_PASS)
    gl_Position = _LightSpaceMatrix * vec4(vs_out.FragPos, 1.0);
#else
    gl_Position = ubo_Projection * ubo_View * vec4(vs_out.FragPos, 1.0);
#endif
}

#shader fragment
#version 450 core

#include ":Shaders/Common/Buffers/EngineUBO.ovfxh"
#include ":Shaders/Common/Utils.ovfxh"
#include ":Shaders/Lighting/Lambert.ovfxh"

in VS_OUT
{
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} fs_in;

uniform vec4 u_Diffuse = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D u_DiffuseMap;
uniform vec2 u_TextureTiling = vec2(1.0, 1.0);
uniform vec2 u_TextureOffset = vec2(0.0, 0.0);

out vec4 FRAGMENT_COLOR;

void main()
{
#if defined(SHADOW_PASS)
    // Empty fragment shader for shadow pass
    gl_FragDepth = gl_FragCoord.z;
#else
    vec2 texCoords = TileAndOffsetTexCoords(fs_in.TexCoords, u_TextureTiling, u_TextureOffset);
    
    const vec3 kLightPosition = vec3(-9000.0, 10000.0, 11000.0);
    const vec3 kLightDiffuse = vec3(1.0);
    const vec3 kLightAmbient = vec3(0.3);
    const vec3 lambert = ComputeLambertLighting(fs_in.FragPos, fs_in.Normal, kLightPosition, kLightDiffuse, kLightAmbient);

    FRAGMENT_COLOR = texture(u_DiffuseMap, texCoords) * u_Diffuse * vec4(lambert, 1.0);
#endif
}
